import { parse } from './url.js'
import { hasdata } from './_util.js'

export function urlfilter(options) {
  options = options || {}
  var $self = this
  // If there are no elements in the selection, exit silently
  if ($self.length == 0)
    return
  var doc = $self[0].ownerDocument

  var attr = options.attr || $self.data('attr') || 'href'
  var event = options.event || $self.data('event') || 'click'
  var selector = options.selector || $self.data('selector') || '.urlfilter'
  var default_src = options.src || $self.data('src') || 'src'
  var default_mode = options.mode || $self.data('mode')
  var default_target = options.target || $self.data('target')
  var default_remove = options.remove || hasdata($self, 'remove')
  var off = options.off || hasdata($self, 'off')
  // options.location and options.history are used purely for testing
  var loc = options.location || (doc.defaultView || doc.parentWindow).location
  var hist = options.history || (doc.defaultView || doc.parentWindow).history

  if (off)
    return $self.off(event + '.urlfilter')

  return $self
    .on(event + '.urlfilter', selector, function (e) {
      e.preventDefault()

      var $this = $(this),
          mode = $this.data('mode') || default_mode,
          target = $this.data('target') || default_target,
          src = $this.data('src') || default_src,
          remove = hasdata($this, 'remove', default_remove)

      var href
      if (e.type == 'click')
        href = $this.attr(attr)
      else if (e.type == 'submit')
        href = '?' + $this.serialize()
      else if (e.type == 'input' || e.type == 'change') {
        var key = encodeURIComponent($this.attr('id') || $this.attr('name'))
        var val = encodeURIComponent($this.val())
        href = '?' + key + '=' + val
      }

      var url = parse(href),
          q = url.searchList

      function target_url(url) {
        var result = parse(url)
          .join(href, { query: false, hash: false })
          .update(q, mode)
        if (remove) {
          var missing_keys = {}
          for (var key in result.searchKey)
            if (result.searchKey[key] === '')
              missing_keys[key] = null
          result.update(missing_keys)
        }
        return result.toString()
      }

      /*
      If the target is...       the URL is get/set at
      ------------------------  ---------------------
      unspecified (=> window)   location.href
      'pushState'               location.href
      '#'                       location.hash
      anything else             $(target).data(src)
      */
      if (!target)
        loc.href = target_url(loc.href)
      else if (target == '#')
        loc.hash = target_url(loc.hash.replace(/^#/, ''))
      else if (target.match(/^pushstate$/i))
        hist.pushState({}, '', target_url(loc.href))
      else {
        $(target).each(function () {
          var $target = $(this)
          var url = target_url($target.attr(src))
          $target.attr(src, url).load(url, function () {
            $target.trigger({ type: 'load', url: url })
          })
        })
      }
      $this.trigger({ type: 'urlfilter', url: url })
    })
}
